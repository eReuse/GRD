# Example YAML to get you started quickly.
# Be aware that YAML has indentation based scoping.
# Code completion support is available so start typing for available options.
# http://editor.swagger.io/
swagger: '2.0'

# This is your document metadata
info:
  version: "0.0.1"
  title: ereuse-grd

paths:
  /api-token-auth/:
    post:
      description: Get authentication token.
      parameters:
      - name: username
        in: formData
        type: string
        required: true
      - name: password
        in: formData
        type: string
        required: true
      
      responses:
        200:
          description: Successful authentication.
          schema:
            title: AuthToken
            type: string
        400:
          description: Invalid credentials
          schema:
            $ref: '#/definitions/Error'
  
  /api/devices/:
    get:
      # Describe this verb here. Note: you can use markdown
      description: |
        Gets `Device` objects.
      # Expected responses for this operation:
      responses:
        200:
          description: Successful response
          schema:
            title: ArrayOfDevices
            type: array
            items:
              title: Device
              type: object
              properties:
                url:
                  type: string
  
  /api/devices/register/:
    post:
      description: Register a `Device`.
      produces:
        - application/json
      parameters:
      - name: registerDevice
        in: body
        required: true
        schema:
          $ref: '#/definitions/RegisterDevice'
      
      responses:
        201:
          description: Device registered
          schema:
            $ref: '#/definitions/Event'
        400:
          description: Validation error
          schema:
            $ref: '#/definitions/Error'
  
  /api/devices/{id}:
    get:
      description: |
        Gets `Device` object details.
      produces:
      - application/json
      # This is array of GET operation parameters:
      parameters:
        -
          name: id
          in: path
          description: ID of device to use
          required: true
          type: string
      responses:
        200:
          description: Device response
          schema:
            title: Device
            type: object
            additionalProperties:
              $ref: '#/definitions/Device'

  /api/devices/{id}/events/:
    get:
      description: |
        Gets `Device`'s events.
      parameters:
      - name: id
        in: path
        description: ID of device to use
        required: true
        type: string
      responses:
        200:
          description: Successful response
          schema:
            title: ArrayOfEvents
            type: array
            items:
              title: Event
              type: object
              additionalProperties:
                $ref: '#/definitions/Event'
  
  /api/devices/{id}/recycle/:
    post:
      description: |
        Recycle a `Device`.
      parameters:
      - name: id
        in: path
        description: ID of device to use
        required: true
        type: string
      - name: EventDevice
        in: body
        required: true
        schema:
          $ref: '#/definitions/EventDevice'
      responses:
        201:
          description: Device recycled.
          schema:
            $ref: '#/definitions/Event'
        400:
          description: Validation error
          schema:
            $ref: '#/definitions/Error'
  
  /api/devices/{id}/collect/:
    post:
      description: |
        Collect a `Device`.
      parameters:
      - name: id
        in: path
        description: ID of device to use
        required: true
        type: string
      - name: EventDevice
        in: body
        required: true
        schema:
          $ref: '#/definitions/EventDevice'
      responses:
        201:
          description: Device collected.
          schema:
            $ref: '#/definitions/Event'
        400:
          description: Validation error
          schema:
            $ref: '#/definitions/Error'
  
  /api/devices/{id}/add/:
    post:
      description: |
        Add `Device`(s) to the `Device`.
      parameters:
      - name: id
        in: path
        description: ID of device to use
        required: true
        type: string
      - name: event
        in: body
        required: true
        schema:
          $ref: '#/definitions/EventDevice'
      responses:
        201:
          description: Device added.
          schema:
            $ref: '#/definitions/Event'
        400:
          description: Validation error
          schema:
            $ref: '#/definitions/Error'
  
  /api/devices/{id}/remove/:
    post:
      description: |
        Remove `Device`(s) from the `Device`.
      parameters:
      - name: id
        in: path
        description: ID of device to use
        required: true
        type: string
      - name: event
        in: body
        required: true
        schema:
          $ref: '#/definitions/EventDevice'
      responses:
        201:
          description: Device(s) removed.
          schema:
            $ref: '#/definitions/Event'
        400:
          description: Validation error
          schema:
            $ref: '#/definitions/Error'

definitions:
  Agent:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      email:
        type: string
      url:
        type: string
        format: url
        readOnly: true
  
  Device:
    type: object
    required:
    - uuid
    - id
    - hid
    - type
    properties:
      uuid: # GRD identifier
        type: string
        readOnly: true
      id: # PRL identifier
        type: string
      hid: # Hardware identifier
        type: string
      type:
        type: string
        enum: ["computer", "screen", "peripheral"]
      url:
        type: string
        format: url
        readOnly: true
  
  Event:
    type: object
    properties:
      type:
        type: string
        enum: ["register", "collect", "recycle", "add"]
      timestamp:
        type: string
      event:
        type: string
      by_user:
        type: string
      url:
        type: string
        format: url
        readOnly: true
  
  Error:
    type: object
    properties:
      message:
        type: string

  EventDevice:
    type: object
    properties:
      event_time:
        type: string
      by_user:
        type: string
      components:
        type: array
        items:
          $ref: '#/definitions/Device'

  RegisterDevice:
    type: object
    properties:
      device:
        type: object
        $ref: '#/definitions/Device'
      event_time:
        type: string
      by_user:
        type: string
      components:
        type: array
        items:
          $ref: '#/definitions/Device'
